service: persona-parley

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  apiGateway:
    binaryMediaTypes:
      - '*/*'
    minimumCompressionSize: 1024
  environment:
    OPENAI_API_KEY: ${ssm:/persona-parley/OPENAI_API_KEY}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
          Resource: 
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/persona-parley/*

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!frontend/**'
    - '!.venv/**'
    - '!__pycache__/**'
    - '!.pytest_cache/**'
    - '!tests/**'
    - '!.git/**'
    - '!*.pyc'
    - '!.DS_Store'
    - '!package.json'
    - '!package-lock.json'
    - '!README.md'
    - 'backend/**'
    - 'requirements.txt'

functions:
  api:
    handler: backend.main.lambda_handler
    timeout: 60  # Increase timeout
    memorySize: 1024  # Increase memory
    layers:
      - { Ref: PythonRequirementsLambdaLayer }  # This ensures Lambda loads the layer
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: 'https://main.d1wv9cggx4trj9.amplifyapp.com'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Requested-With
            allowCredentials: true
            maxAge: 86400
    environment:
      STAGE: ${sls:stage}
    package:
      patterns:
        - 'backend/**/*.py'
        - 'requirements.txt'

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    layer:
      name: persona-parley-deps-${sls:stage}-${sls:instanceId}  # Forces a unique layer per deploy
    noDeploy:
      - boto3
      - botocore
      - pip
      - setuptools
      - wheel
    slim: true
    strip: true
    dockerizePip: true
